import fs from "fs";
import path from "path";
import { PrismaClient } from "@prisma/client";

export const readDirectoryTrajectories = (files: string[], fileDir: string, prisma: PrismaClient): void => {
  //filtrar los archivos (solo los txt)
    const txtFiles = files.filter((file) => path.extname(file) === ".txt");
  console.log(txtFiles);

  txtFiles.forEach((file) => {
    const filePath = path.join(fileDir, file);

    const readStream = fs.createReadStream(filePath, "utf8");
     // const data = fs.readFileSync(fileDir, "utf8");
        // console.log('data',data)
    
    let bufferData = "";
    readStream.on("data", async (chunk) => {
    //   console.log("Iniciando el stream");
      bufferData += chunk;
      let lineTaxi = bufferData.split("\n");
      bufferData = lineTaxi.pop()!;
      const allTrajectories = lineTaxi.map((trajectory) => {
        const [taxi_id, date, latitude,longitude] = trajectory.split(",");
        return {
          taxi_id: parseInt(taxi_id.trim()),
          date: new Date(date.trim()).toISOString(),
          latitude: parseFloat(latitude.trim()),
          longitude: parseFloat(longitude.trim())};
      });
// console.log('allTaxis',allTaxis)
          // Insertar los datos en la base de datos
    //   for (const trajectory of allTrajectories) {
    //     await prisma.trajectories.createMany({
    //       data: trajectory,
    //     });
    //   }
    try {
        // Insertar los datos en la base de datos
        await prisma.trajectories.createMany({
          data: allTrajectories.map((trajectory) => ({
            taxi_id: trajectory.taxi_id,
            date: trajectory.date,
            latitude: trajectory.latitude,
            longitude: trajectory.longitude,
          })),
          skipDuplicates: true, // Opcional: saltar duplicados
        });
      } catch (error) {
        console.error("Error al insertar datos en la base de datos:", error);
      }
    });

    readStream.on("end", async () => {
      if (bufferData) {
        let lineTaxi = bufferData.split("\n");
        const allTrajectories = lineTaxi.map((trajectory) => {
            const [taxi_id, date, latitude,longitude] = trajectory.split(",");
            return { taxi_id: parseInt(taxi_id.trim()), date: new Date(date.trim()).toISOString(),latitude: parseFloat(latitude.trim()),longitude: parseFloat(longitude.trim()) };    
        });
        for (const trajectory of allTrajectories) {
          await prisma.trajectories.createMany({
            data: trajectory,
          });
        }
      }
    //   console.log("Fin del stream");
    });

    
  });
//   console.log("Data inserted successfully!");
};